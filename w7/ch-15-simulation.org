1. Run with seeds 1, 2, and 3, and compute whether each virtual address generated by the process is in or out of bounds. If in bounds, compute the translation.

   #+begin_src shell
     for n in {1,2,3}; do ./relocation.py -s $n; done

     ARG seed 1
     ARG address space size 1k
     ARG phys mem size 16k

     Base-and-Bounds register information:

       Base   : 0x0000363c (decimal 13884)
       Limit  : 290

     Virtual Address Trace
       VA  0: 0x0000030e (decimal:  782) --> PA or segmentation violation? - SF
       VA  1: 0x00000105 (decimal:  261) --> PA or segmentation violation? - 14145
       VA  2: 0x000001fb (decimal:  507) --> PA or segmentation violation? - SF
       VA  3: 0x000001cc (decimal:  460) --> PA or segmentation violation? - SF
       VA  4: 0x0000029b (decimal:  667) --> PA or segmentation violation? - SF


     ARG seed 2
     ARG address space size 1k
     ARG phys mem size 16k

     Base-and-Bounds register information:

       Base   : 0x00003ca9 (decimal 15529)
       Limit  : 500

     Virtual Address Trace
       VA  0: 0x00000039 (decimal:   57) --> PA or segmentation violation? - 15586
       VA  1: 0x00000056 (decimal:   86) --> PA or segmentation violation? - 15615
       VA  2: 0x00000357 (decimal:  855) --> PA or segmentation violation? - SF
       VA  3: 0x000002f1 (decimal:  753) --> PA or segmentation violation? - SF
       VA  4: 0x000002ad (decimal:  685) --> PA or segmentation violation? - SF

     ARG seed 3
     ARG address space size 1k
     ARG phys mem size 16k

     Base-and-Bounds register information:

       Base   : 0x000022d4 (decimal 8916)
       Limit  : 316

     Virtual Address Trace
       VA  0: 0x0000017a (decimal:  378) --> PA or segmentation violation? - SF
       VA  1: 0x0000026a (decimal:  618) --> PA or segmentation violation? - SF
       VA  2: 0x00000280 (decimal:  640) --> PA or segmentation violation? - SF
       VA  3: 0x00000043 (decimal:   67) --> PA or segmentation violation? - 8983
       VA  4: 0x0000000d (decimal:   13) --> PA or segmentation violation? - 8929
   #+end_src

2. Run with these flags: -s 0 -n 10. What value do you have set -l (the bounds register) to in order to ensure that all the generated virtual addresses are within bounds?

   #+begin_src shell
   -l 930
   #+end_src

3. Run with these flags: -s 1 -n 10 -l 100. What is the maximum value that base can be set to, such that the address space still fits into physical memory in its entirety?

   #+begin_src shell
     -b 16284
   #+end_src

4. Run some of the same problems above, but with larger address spaces (-a) and physical memories (-p).

5. What fraction of randomly-generated virtual addresses are valid, as a function of the value of the bounds register? Make a graph from running with different random seeds, with limit values ranging from 0 up to the maximum size of the address space.

   #+begin_src python
     bounds = 100
     asize = 2 ** 14 # 16k
     valid = 1.0 * bounds / asize

     res = []

     for i in range(0, 2**14, 250):
         res.append([i,int(1.0 * i / asize * 100)])

     return res
   #+end_src

   | bounds_size | pct_valid |
   |           0 |         0 |
   |         250 |         1 |
   |         500 |         3 |
   |         750 |         4 |
   |        1000 |         6 |
   |        1250 |         7 |
   |        1500 |         9 |
   |        1750 |        10 |
   |        2000 |        12 |
   |        2250 |        13 |
   |        2500 |        15 |
   |        2750 |        16 |
   |        3000 |        18 |
   |        3250 |        19 |
   |        3500 |        21 |
   |        3750 |        22 |
   |        4000 |        24 |
   |        4250 |        25 |
   |        4500 |        27 |
   |        4750 |        28 |
   |        5000 |        30 |
   |        5250 |        32 |
   |        5500 |        33 |
   |        5750 |        35 |
   |        6000 |        36 |
   |        6250 |        38 |
   |        6500 |        39 |
   |        6750 |        41 |
   |        7000 |        42 |
   |        7250 |        44 |
   |        7500 |        45 |
   |        7750 |        47 |
   |        8000 |        48 |
   |        8250 |        50 |
   |        8500 |        51 |
   |        8750 |        53 |
   |        9000 |        54 |
   |        9250 |        56 |
   |        9500 |        57 |
   |        9750 |        59 |
   |       10000 |        61 |
   |       10250 |        62 |
   |       10500 |        64 |
   |       10750 |        65 |
   |       11000 |        67 |
   |       11250 |        68 |
   |       11500 |        70 |
   |       11750 |        71 |
   |       12000 |        73 |
   |       12250 |        74 |
   |       12500 |        76 |
   |       12750 |        77 |
   |       13000 |        79 |
   |       13250 |        80 |
   |       13500 |        82 |
   |       13750 |        83 |
   |       14000 |        85 |
   |       14250 |        86 |
   |       14500 |        88 |
   |       14750 |        90 |
   |       15000 |        91 |
   |       15250 |        93 |
   |       15500 |        94 |
   |       15750 |        96 |
   |       16000 |        97 |
   |       16250 |        99 |
