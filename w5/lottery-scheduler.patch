diff --git a/proc.c b/proc.c
index 806b1b1..2be6417 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "pstat.h"
 
 struct {
   struct spinlock lock;
@@ -20,6 +21,22 @@ extern void trapret(void);
 
 static void wakeup1(void *chan);
 
+const int m = 4294967295;
+const int a = 1664525;
+const int c = 1013904223;
+unsigned int seed = 12345;
+
+void
+srand(unsigned int _seed) {
+  seed = _seed;
+}
+
+unsigned int
+prand() {
+  return seed = (a * seed + c) % m;
+}
+
+
 void
 pinit(void)
 {
@@ -38,10 +55,10 @@ struct cpu*
 mycpu(void)
 {
   int apicid, i;
-  
+
   if(readeflags()&FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
@@ -76,6 +93,8 @@ allocproc(void)
   struct proc *p;
   char *sp;
 
+  cprintf("starting new proc\n");
+
   acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
@@ -88,6 +107,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;
 
   release(&ptable.lock);
 
@@ -124,7 +144,7 @@ userinit(void)
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
   if((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
@@ -199,6 +219,7 @@ fork(void)
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+  np->tickets = curproc->tickets;
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -275,7 +296,7 @@ wait(void)
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
+
   acquire(&ptable.lock);
   for(;;){
     // Scan through table looking for exited children.
@@ -325,16 +346,36 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+
   for(;;){
+    int tickTotal = 0;
+    int current = 0;
+    int winner = 0;
+
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
+      tickTotal += p->tickets;
+    }
+
+    if (tickTotal == 0)
+      tickTotal = 1;
+
+    winner = prand() % tickTotal;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE)
+        continue;
+
+//      cprintf("running pid=%d tickets=%d total=%d winner=%d\n", p->pid, p->tickets, tickTotal, winner);
+      current += p->tickets;
+      if (current <= winner)
+        continue;
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -349,6 +390,7 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      p->ticks++;
     }
     release(&ptable.lock);
 
@@ -418,7 +460,7 @@ void
 sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   if(p == 0)
     panic("sleep");
 
@@ -523,7 +565,7 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("%d %d %s %s ", p->pid, p->ticks, state, p->name);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
@@ -532,3 +574,17 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+int fill_pstat(struct pstat *ps) {
+  struct proc *p;
+  int i = 0;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    ps->pid[i] = p->pid;
+    ps->inuse[i] = p->state;
+    ps->tickets[i] = p->tickets;
+    ps->ticks[i] = p->ticks;
+    i += 1;
+  }
+  return 0;
+}
diff --git a/proc.h b/proc.h
index 1647114..a4d7f62 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
+  int ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..2ace1b4
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,16 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+  int tickets[NPROC]; // the number of tickets this process has
+  int pid[NPROC];     // the PID of each process
+  int ticks[NPROC];   // the number of ticks each process has accumulated
+};
+
+int fill_pstat(struct pstat*);
+
+
+#endif // _PSTAT_H_
diff --git a/syscall.c b/syscall.c
index f9ea7f3..c2afb88 100644
--- a/syscall.c
+++ b/syscall.c
@@ -104,6 +104,8 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_getreadcount(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -128,6 +130,8 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_getreadcount] sys_getreadcount,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index c5ebb23..61f5376 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,5 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_getreadcount 22
+#define SYS_settickets 23
+#define SYS_getpinfo 24
diff --git a/sysproc.c b/sysproc.c
index 0686d29..c94f0b9 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,25 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int sys_settickets(void) {
+  int number;
+
+  if (argint(0, &number) < 0)
+    return -1;
+
+  if (number < 0)
+    return -2;
+
+  myproc()->tickets = number;
+  return 0;
+}
+
+int sys_getpinfo(void) {
+  struct pstat *ps;
+
+  if (argptr(0, (void *)&ps, sizeof(struct pstat)) < 0)
+    return -1;
+
+  return fill_pstat(ps);
+}
diff --git a/test_1.c b/test_1.c
new file mode 100644
index 0000000..a0209a2
--- /dev/null
+++ b/test_1.c
@@ -0,0 +1,43 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+
+int do_loop() {
+  int ret;
+  for (int i = 0;i < 100000000; i++) {
+    ret = 2 * 32 * 1203 / 123;
+  }
+  return ret;
+}
+
+int
+main(int argc, char *argv[]) {
+  struct pstat ps;
+  int chld = fork();
+
+  if (chld == -1) {
+    printf(1, "fork failed\n");
+    return -1;
+  } else if (chld == 0) {
+    settickets(40);
+
+    printf(1, "XV6_TEST_OUTPUT ==> in child\n");
+    for(;;) {
+      do_loop();
+    }
+    exit();
+  } else {
+    settickets(2);
+    for(int i = 0; i < 15; i++) {
+      getpinfo(&ps);
+      for(int j = 0; j < NPROC; j++) {
+        if (ps.inuse[j] == 0)
+          continue;
+        printf(1, "XV6_TEST_OUTPUT %d %d %d\n", ps.pid[j], ps.tickets[j], ps.ticks[j]);
+      }
+      printf(1, "XV6_TEST_OUTPUT\n");
+    }
+  }
+  exit();
+}
diff --git a/user.h b/user.h
index 7886468..cf1c3a5 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -24,6 +25,8 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int getreadcount(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 7af84de..b570ac5 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,5 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(getreadcount)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
