1. First run with the flags -n 10 -H 0 -p BEST -s 0 to generate a few random allocations and frees. Can you predict what alloc()/free() will return? Can you guess the state of the free list after each request? What do you notice about the free list over time?
   #+begin_src shell
     ><> ./malloc.py -n 10 -H 0 -p BEST -s 0
     seed 0
     size 100
     baseAddr 1000
     headerSize 0
     alignment -1
     policy BEST
     listOrder ADDRSORT
     coalesce False
     numOps 10
     range 10
     percentAlloc 50
     allocList
     compute False

     ptr[0] = Alloc(3) returned 1000
     List
     - addr: 1003 size: 97 next: NULL

     Free(ptr[0])
     returned 0
     List
     - addr: 1000 size: 3: next: 1003
     - addr: 1003: size: 97 next: 0

     ptr[1] = Alloc(5) returned 1003 (search 2)
     List
     - addr: 1000 size: 3: next: 1008
     - addr: 1008: size: 92 next: 0


     Free(ptr[1])
     returned 0
     List
     - addr: 1000 size: 3 next: 1003
     - addr: 1003 size: 5 next: 1008
     - addr: 1008: size: 92 next: 0


     ptr[2] = Alloc(8) returned 1008 (search 3)
     List
     - addr: 1000 size: 3 next: 1003
     - addr: 1003 size: 5 next: 1016
     - addr: 1016: size: 84 next: 0

     Free(ptr[2])
     returned 0
     List
     - addr: 1000 size: 3 next: 1003
     - addr: 1003 size: 5 next: 1008
     - addr: 1008 size: 8 next: 1016
     - addr: 1016: size: 84 next: 0

     ptr[3] = Alloc(8) returned 1008 (search 3)
     List
     - addr: 1000 size: 3 next: 1003
     - addr: 1003 size: 5 next: 1016
     - addr: 1016: size: 84 next: 0

     Free(ptr[3])
     returned 0
     List
     - addr: 1000 size: 3 next: 1003
     - addr: 1003 size: 5 next: 1008
     - addr: 1008 size: 8 next: 1016
     - addr: 1016: size: 84 next: 0

     ptr[4] = Alloc(2) returned 1000
     List
     - addr: 1002 size: 1 next: 1003
     - addr: 1003 size: 5 next: 1008
     - addr: 1008 size: 8 next: 1016
     - addr: 1016: size: 84 next: 0

     ptr[5] = Alloc(7) returned 1008
     List
     - addr: 1002 size: 1 next: 1003
     - addr: 1003 size: 5 next: 1008
     - addr: 1015 size: 1 next: 1016
     - addr: 1016: size: 84 next: 0
   #+end_src
   The free list is fragmented as we alloc and free memory.  The list is not coalesced, so contiguous free regions are not merged together
2. How are the results different when using a WORST fit policy to search the free list (-p WORST)? What changes?

   Fragmentation is similar, but allocation happens at the largest segment.

3. What about when using FIRST fit (-p FIRST)? What speeds up when you use first fit?

   Allocation of size 2 when first element is size 3 means it stops searching after first element.  WORST and BEST fit always search the entire list, but BEST fit could be optimized to exit the loop if it finds an exact memory fit.

   (see ./malloc.py -n 10 -H 0 -p BEST -s 0 -c -l SIZESORT+ alloc ptr[3] searches 4 elements, but should only need to search 3)

4. For the above questions, how the list is kept ordered can affect the time it takes to find a free location for some of the policies. Use the different free list orderings (-l ADDRSORT, -l SIZESORT+,-l SIZESORT-) to see how the policies and the list orderings interact.

   For FIRST fit, sorting by size (largest-to-smallest) has the fewest searches and the cost of the longest free list.

5. Coalescing of a free list can be quite important. Increase the number of random allocations (say to -n 1000). What happens to larger allocation requests over time? Run with and without coalescing (i.e., without and with the -C flag). What differences in outcome do you see? How big is the free list over time in each case? Does the ordering of the list matter in this case?

   ./malloc.py -n 1000 -H 0 -p FIRST -s 0 -c -l SIZESORT+  |egrep -oi 'Size [0-9]+' |cut -f2 -d' ' |  gnuplot -p -e 'plot "/dev/stdin" using 0:1 with lines'

   Output show the [[file:first-fit-free-list-size.svg\]\]][list size stabilizes]] after a few hundred allocations without coalescing.

   The above command using BEST or FIRST fit had the same # of allocation failures (177) vs WORST (658).  These numbers were slightly smaller with coalescing, but not by much.

   However, sorting by ADDR instead of SIZE improved the effectiveness of coalescing memory, for all allocation strategies:

   #+begin_src shell
     for i in {1..10}; do ./malloc.py -s $i -n 1000 -H 0 -p FIRST -C -c -l ADDRSORT  |grep -c 'returned -1'; done
     23
     8
     49
     24
     36
     32
     24
     39
     12
     34

     for i in {1..10}; do ./malloc.py -s $i -n 1000 -H 0 -p BEST -C -c -l ADDRSORT  |grep -c 'returned -1'; done
     21
     7
     48
     22
     36
     35
     26
     34
     11
     35

     for i in {1..10}; do ./malloc.py -s $i -n 1000 -H 0 -p WORST -C -c -l ADDRSORT  |grep -c 'returned -1'; done
     23
     8
     58
     28
     38
     34
     34
     44
     13
     35
   #+end_src

   Free list size was slightly lower, but stabilized similar to above.

6. What happens when you change the percent allocated fraction -P to higher than 50? What happens to allocations as it nears 100? What about as the percent nears 0?

   As allocations near 100, the number of failed allocations increases as there is not enough free memory to handle the allocations.  As P nears 0, there are fewer allocation failures there and the free list is smaller.

7. What kind of specific requests can you make to generate a highly-fragmented free space? Use the -A flag to create fragmented free lists, and see how different policies and options change the organization of the free list.

   Making allocations (and frees) of increased size leads to fragmentation.  Doing frequent allocs and frees leads to fragmentation for WORST and possibly FIRST fit strategies.
